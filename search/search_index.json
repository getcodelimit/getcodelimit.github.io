{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodeLimit","text":"<p> Your Refactoring Alarm </p> <p>No developer writes unmaintainable code on purpose, yet a lot of code is unmaintainable.</p> <p>How does that happen?</p> <p>Actually, most code start out easy, but over time it becomes harder to maintain, until it's unmaintainable.</p>"},{"location":"#how-to-prevent-unmaintainable-code","title":"How to prevent unmaintainable code?","text":"<p>The best way to prevent unmaintainable code is to refactor it before it becomes unmaintainable.</p> <p>Developers can make simple things complex, like unmaintainable code, but they are much better at making complex things simple. Refactoring makes complex code simple again.</p> <p>But when to refactor? How much to refactor? What to refactor? That's where CodeLimit comes in.</p>"},{"location":"#meet-codelimit","title":"Meet CodeLimit","text":"<p>CodeLimit is a tool for developers with one goal: it tells the developer when it\u2019s time to refactor.</p>"},{"location":"#key-features-and-design-principles","title":"Key features and design principles","text":"<ul> <li>A non-controversial code metric: Most developers agree longer functions   are harder to maintain</li> <li>Actionable results: There's always a refactoring possible to make   functions smaller</li> <li>Runs everywhere: Fits your development workflow, whether it's in a build   pipeline, a pre-commit hook, or standalone</li> <li>Covers many languages: A single tool for all your projects</li> <li>Sane defaults: Zero configuration, but allows customization</li> <li>Low threshold to get started: Can only check new or modified code, so   even if you have a backlog of technical debt, you can start using CodeLimit today</li> </ul>"},{"location":"#next-steps","title":"Next steps","text":"<p>Go to the Getting Started section to start using CodeLimit, or read more about the function length metric.</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#excluding-functions","title":"Excluding functions","text":"<p>Functions can be excluded from analysis by putting a <code>nocl</code> comment (case-insensitive) on the line of the name of function.</p> <p>For example, to ignore a Python function:</p> <pre><code>def some_function(): # nocl\n    ...\n</code></pre> <p>or to ignore this Python function:</p> <pre><code>def some_functions( # nocl\n        some_numbers: list[int]\n) -&gt; int:\n    ...\n</code></pre> <p>or to ignore this C function:</p> <pre><code>void some_function(int a, const char *b) { // nocl\n    ...\n</code></pre>"},{"location":"configuration/#excluding-files","title":"Excluding files","text":"<p>Files can be excluded from analysis by using the <code>--exclude</code> option. This option can be used multiple times and takes a glob pattern as a value, for example:</p> <pre><code>codelimit --exclude \"*.generated.py\" --exclude \"docs/*\" ...\n</code></pre> <p>The <code>--exclude</code> option extends the default exclusion list. The default exclusion list is:</p> <pre><code>[\n    \".bzr\",\n    \".direnv\",\n    \".eggs\",\n    \".git\",\n    \".git-rewrite\",\n    \".hg\",\n    \".ipynb_checkpoints\",\n    \".mypy_cache\",\n    \".nox\",\n    \".pants.d\",\n    \".pytest_cache\",\n    \".pytype\",\n    \".ruff_cache\",\n    \".svn\",\n    \".tox\",\n    \".venv\",\n    \".vscode\",\n    \"__pypackages__\",\n    \"_build\",\n    \"buck-out\",\n    \"build\",\n    \"dist\",\n    \"node_modules\",\n    \"venv\",\n    \"test\",\n    \"tests\",\n]\n</code></pre>"},{"location":"development/","title":"Development","text":"<p>After installing dependencies with <code>uv sync</code>, CodeLimit can be run from the repository root like this:</p> <pre><code>uv run codelimit\n</code></pre> <p>For example, to check a codebase at <code>~/projects/fastapi</code> run:</p> <pre><code>uv run codelimit scan ~/projects/fastapi\n</code></pre>"},{"location":"development/#local-installation-using-pipx","title":"Local installation using pipx","text":"<p>To install the development repository locally run:</p> <pre><code>pipx install .\n</code></pre> <p>To install the <code>main</code> branch locally run:</p> <pre><code>pipx install git+https://github.com/getcodelimit/codelimit.git\n</code></pre> <p>Or to install another branch locally run:</p> <pre><code>pip install git+https://github.com/getcodelimit/codelimit.git@issue-123\n</code></pre>"},{"location":"development/#building-the-binary-distribution","title":"Building the binary distribution","text":"<p>Generate a self-contained binary:</p> <pre><code>uv run poe bundle\n</code></pre>"},{"location":"development/#static-documentation","title":"Static documentation","text":"<p>Generating the static documentation:</p> <pre><code>uv run mkdocs build\n</code></pre> <p>See the output:</p> <pre><code>uv run mkdocs serve\n</code></pre> <p>Terminal sessions in the documentation are recorded with the Asciinema CLI and stored in the <code>assets</code> folder:</p> <pre><code>asciinema rec scan.cast\n</code></pre>"},{"location":"faq/","title":"F.A.Q.","text":""},{"location":"faq/#q-what-programming-languages-does-codelimit-support","title":"Q. What programming languages does CodeLimit support?","text":"<p>Currently CodeLimit supports these programming languages:</p> <ul> <li>C</li> <li>C++</li> <li>C#</li> <li>Java</li> <li>JavaScript</li> <li>Python</li> <li>TypeScript</li> </ul>"},{"location":"faq/#q-how-does-codelimit-compare-to","title":"Q. How does CodeLimit compare to ...","text":"<p>Black</p> <p>Black is a code formatter and can run alongside CodeLimit.</p> <p>Flake8</p> <p>Flake8 is a linter and can run alongside CodeLimit. Flake8 can be extended with third-party plugins.</p> <p>Lizard</p> <p>Lizard is a code quality tool that measures cyclomatic complexity and code duplication.The tool is more used for reporting than monitoring during development.</p> <p>Radon</p> <p>Radon is a code quality tool that computes various metrics. Radon calculates cyclomatic complexity for functions but not lines of code. The tool is more used for reporting than monitoring during development.</p> <p>Ruff</p> <p>Ruff is a linter and can run alongside CodeLimit. Ruff has no linting rule for function length.</p>"},{"location":"why-function-length/","title":"Why Function Length?","text":"<p>Function length is just one code metric, but it is a very important code metric. Short functions are easy to understand, easy to test, easy to re-use. For example, code duplication is another important code metric but duplication is much easier to prevent and fix if your functions are short.</p> Unmaintainable code. Looks easy; should be done in half an hour I reckon [source] <p>Function length is a simple code metric, so simple you can count it by hand. It's also a (fairly) non-controversial metric, most developers agree longer functions are harder to maintain. Also, there's always a refactoring possible to make functions smaller.</p>"},{"location":"why-function-length/#why-codelimit","title":"Why CodeLimit?","text":"<p>Because function length is such a simple code metric, many code quality tools measure it. But these tools measure a lot more metrics, sometimes so much metrics that developers are overwhemled and loose focus on the metrics that matter most.</p> <p>CodeLimit measures only function length but it tries to be the best developer tool for measuring it. By notifying developers when it's time to refactor, Code Limit prevents unmaintainable code.</p>"},{"location":"why-function-length/#how-codelimit-measures-function-length","title":"How CodeLimit measures function length","text":"<p>CodeLimit measures the lines of code for each function in your codebase and assigns each function to a category:</p> Easy Verbose Hard-to-maintain \u26a0 Unmaintainable \u2716 1 - 15 lines of code 16 - 30 lines of code 31 - 60 lines of code 60+ lines of code <p>As the table above shows, functions with more than 60 lines of code (comments and empty lines are not counted) are unmaintainable, and need to be refactored. Functions with more than 30 lines of code run a risk of turning into unmaintainable functions over time, you should keep an eye on them and refactor if possible. Functions in the first two categories are fine and don't need refactoring.</p>"},{"location":"getting-started/development-workflow/","title":"Development workflow","text":""},{"location":"getting-started/development-workflow/#github-action","title":"GitHub Action","text":"<p>CodeLimit is available as a GitHub Action</p> <p>Insert CodeLimit in your workflow like this: </p> <pre><code>- name: 'Run CodeLimit'\n  uses: getcodelimit/codelimit-action@v1\n</code></pre> <p>When running as a GitHub Action, CodeLimit only checks modified files and warns about functions that should be refactored and fails for functions that need to be refactored.</p> <p>An example of a workflow that runs CodeLimit on every push and before every merge to <code>main</code>:</p> <pre><code>name: 'codelimit'\n\non:\n  push:\n    branches: \n      - main\n  pull_request:\n    branches: \n      - main\n\njobs:\n  ci:\n    runs-on: ubuntu-latest\n    steps:\n      - name: 'Checkout sources'\n        uses: actions/checkout@v4\n\n      - name: 'Run CodeLimit'\n        uses: getcodelimit/codelimit-action@v1\n</code></pre>"},{"location":"getting-started/development-workflow/#status-badge","title":"Status badge","text":"<p>A status badge is stored after each run in the <code>_codelimit_reports</code> branch of the repository.</p> <p>To get the Markdown for the badge run the CodeLimit CLI in a local checkout of the repository, for example:</p> <pre><code>\n$ codelimit badge\n[![CodeLimit](https://github.com/getcodelimit/codelimit/blob/_codelimit_reports/\nmain/badge.svg)](https://github.com/getcodelimit/codelimit/blob/_codelimit_repor\nts/main/codelimit.md)\n\n\u2714 Badge Markdown copied to clipboard!\n</code></pre>"},{"location":"getting-started/development-workflow/#meaning-of-the-badge","title":"Meaning of the badge","text":"<p>If a repository contains functions that exceed 60 lines of code, the badge will show:</p> <p>If a repository contains no functions that exceed 30 lines of code, the badge will show:</p> <p>Otherwise, the badge will show the percentage of code that does not exceed 30 lines of code.</p> <p>If that percentage is 80% or higher, the badge will be green:</p> <p>If that percentage is below 80%, the badge will be orange.</p>"},{"location":"getting-started/development-workflow/#pre-commit-hook","title":"Pre-commit hook","text":"<p>CodeLimit can be installed as a pre-commit hook so it alarms you during development when it's time to refactor:</p> <pre><code>-   repo: https://github.com/getcodelimit/codelimit\n    rev: 0.6.2\n    hooks:\n    - id: codelimit\n</code></pre> <p>CodeLimit is intended to be used alongside formatting, linters and other hooks that improve the consistency and quality of your code (such as Black, Ruff and MyPy.) As an example pre-commit configuration see the <code>pre-commit-config.yaml</code> from CodeLimit itself.</p> <p>When running as a hook, CodeLimit warns about functions that should be refactored and fails for functions that need to be refactord.</p>"},{"location":"getting-started/standalone-usage/","title":"Standalone Usage","text":""},{"location":"getting-started/standalone-usage/#installation","title":"Installation","text":""},{"location":"getting-started/standalone-usage/#homebrew","title":"Homebrew","text":"<p>CodeLimit is available on Homebrew:</p> <pre><code>brew install codelimit\n</code></pre>"},{"location":"getting-started/standalone-usage/#pipx","title":"Pipx","text":"<p>To install the standalone version of CodeLimit in an isolated Python environment using pipx run:</p> <pre><code>pipx install codelimit\n</code></pre>"},{"location":"getting-started/standalone-usage/#pypi","title":"PyPi","text":"<p>To install the standalone version of CodeLimit for your default Python installation run:</p> <pre><code>python -m pip install codelimit\n</code></pre>"},{"location":"getting-started/standalone-usage/#platform-binaries","title":"Platform binaries","text":"<p>Binaries for different platforms (macOS, Linux, Windows) are available on the latest release page.</p>"},{"location":"getting-started/standalone-usage/#usage","title":"Usage","text":"<p>Run CodeLimit without arguments to see the usage page:</p> <pre><code>$ codelimit\n\n Usage: codelimit [OPTIONS] COMMAND [ARGS]...\n\n CodeLimit: Your refactoring alarm.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --verbose  -v            Verbose output                                      \u2502\n\u2502 --exclude          TEXT  Glob patterns for exclusion [default: None]         \u2502\n\u2502 --version  -V            Show version                                        \u2502\n\u2502 --help                   Show this message and exit.                         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 check          Check file(s)                                                 \u2502\n\u2502 scan           Scan a codebase                                               \u2502\n\u2502 report         Show report for codebase                                      \u2502\n\u2502 app            CodeLimit GitHub App commands                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"getting-started/standalone-usage/#scanning-a-codebase","title":"Scanning a codebase","text":"<p>To scan a complete codebase run:</p> <pre><code>codelimit scan path/to/codebase\n</code></pre>"},{"location":"getting-started/standalone-usage/#viewing-a-report","title":"Viewing a report","text":"<p>To view the report with hard-to-maintain and unmaintainable functions of a codebase that was scanned before run:</p>"},{"location":"getting-started/standalone-usage/#checking-files","title":"Checking files","text":"<p>To check a single file or list of files for functions that need refactoring, run:</p> <pre><code>codelimit check a.py b.py c.py\n</code></pre>"}]}